<% module_namespacing do -%>
class <%= controller_class_name %>Controller < ApplicationController
  include ActionView::RecordIdentifier
  before_action :set_<%= singular_table_name %>, only: %i[ show edit update destroy ]
  before_action :get_<%= singular_parent_table_name %>, only: %i[ create ]

  def edit
  end

  def create
    @<%= singular_parent_table_name %>.<%= plural_table_name %>.create! <%= singular_table_name %>_params
    redirect_to @<%= singular_parent_table_name %>
  end

  def update
    respond_to do |format|
       if @<%= singular_table_name %>.update(<%= singular_table_name %>_params)
         format.html { redirect_to @<%= singular_table_name %>, notice: t('messages.row_updated') }
         format.json { render json: <%= "@#{singular_table_name}" %> }
       else
         format.html { render :edit, status: :unprocessable_entity }
         format.json { render json: <%= "@#{singular_table_name}.errors" %>, status: :unprocessable_entity }
       end
    end
  end

  def destroy
    @<%= singular_table_name %>.destroy
    
    respond_to do |format|
      format.turbo_stream { render turbo_stream: turbo_stream.remove(dom_id(@<%= singular_table_name %>)) }
    end
  end

  private
    def set_<%= singular_table_name %>
      @<%= singular_table_name %> = <%= model_name %>.find(params[:id]) 
    end
    
    def get_<%= singular_parent_table_name %>
      @<%= singular_parent_table_name %> = <%= parent_model_name %>.find(params[:<%= singular_parent_table_name %>_id]) 
    end

    def <%= "#{singular_table_name}_params" %>
      <%- if attributes_names.empty? -%>
      params.fetch(:<%= singular_table_name %>, {})
      <%- else -%>
      params.require(:<%= singular_table_name %>).permit(<%= permitted_params %>)
      <%- end -%>
    end
end
<% end -%>
